def permuteUnique(nums):
    def backtrack(current_permutation, used):
        if len(current_permutation) == len(nums):
            result.append(current_permutation[:])  # Make a copy of current permutation
            return
        
        visited = [False] * len(nums)
        for i in range(len(nums)):
            if used[i] or (i > 0 and nums[i] == nums[i-1] and not visited[i-1]):
                continue
            used[i] = True
            current_permutation.append(nums[i])
            backtrack(current_permutation, used)
            current_permutation.pop()
            used[i] = False
            visited[i] = True
    
    result = []
    nums.sort()  # Sort to handle duplicates
    used = [False] * len(nums)
    backtrack([], used)
    return result

# Example usage:
nums = [1, 1, 2]
print(permuteUnique(nums))
# Output: [[1, 1, 2], [1, 2, 1], [2, 1, 1]]
