def combinationSum(candidates, target):
    candidates.sort()  # Sort candidates to handle duplicates and ensure non-decreasing order
    result = []
    
    def backtrack(combination, start_index, current_sum):
        if current_sum == target:
            result.append(combination[:])  # Make a copy of current combination
            return
        if current_sum > target:
            return
        
        for i in range(start_index, len(candidates)):
            combination.append(candidates[i])
            backtrack(combination, i, current_sum + candidates[i])
            combination.pop()
    
    backtrack([], 0, 0)
    return result

# Example usage:
candidates = [2, 3, 6, 7]
target = 7
print(combinationSum(candidates, target))  # Output: [[2, 2, 3], [7]]
